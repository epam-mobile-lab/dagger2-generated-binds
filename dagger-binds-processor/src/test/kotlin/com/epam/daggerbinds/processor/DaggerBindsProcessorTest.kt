/*
 * Copyright 2019 EPAM Systems, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.epam.daggerbinds.processor

import com.google.testing.compile.CompilationSubject
import com.google.testing.compile.Compiler
import com.google.testing.compile.JavaFileObjects
import org.junit.Before
import org.junit.Test

class DaggerBindsProcessorTest {

    companion object {
        const val generatedClassQualifierName = "com.epam.daggerbinds.bindto.Generated_BindsModule"
        const val generatedClassSourceWithSingleType = """
            package com.epam.daggerbinds.bindto;

            import com.epam.subtypes.single.Service;
            import com.epam.subtypes.single.ServiceImp;
            import dagger.Binds;
            import dagger.Module;

            /**
            * Generated by dagger-binds-generator
            * 13-June-2019 16:34
            */
            @Module
            public interface Generated_BindsModule {
            @Binds
            Service binds_com_epam_subtypes_single_ServiceImp(ServiceImp com_epam_subtypes_single_ServiceImp);
            }
            """
        const val generatedClassSourceWithMultiTypes = """
            package com.epam.daggerbinds.bindto;

            import com.epam.subtypes.severalfirst.Repository;
            import com.epam.subtypes.severalfirst.RepositoryImpFirst;
            import com.epam.subtypes.severalfirst.RepositoryImpSecond;
            import dagger.Binds;
            import dagger.Module;
            import javax.inject.Named;
            /**
             * Generated by dagger-binds-generator
             * 17-June-2019 14:20
             */
            @Module
            public interface Generated_BindsModule {
              @Binds
              @Named("com.epam.subtypes.severalfirst.RepositoryImpFirst")
              Repository binds_com_epam_subtypes_severalfirst_RepositoryImpFirst(
                  RepositoryImpFirst com_epam_subtypes_severalfirst_RepositoryImpFirst);

              @Binds
              @Named("com.epam.subtypes.severalfirst.RepositoryImpSecond")
              Repository binds_com_epam_subtypes_severalfirst_RepositoryImpSecond(
                  RepositoryImpSecond com_epam_subtypes_severalfirst_RepositoryImpSecond);
            """

        const val serviceSourceQualifierName = "com.epam.subtypes.single.Service"
        const val serviceSource = """
            package com.epam.subtypes.single;

            public interface Service {
            }
            """

        const val serviceImpSourceQualifierName = "com.epam.subtypes.single.ServiceImp"
        const val serviceImpSource = """
            package com.epam.subtypes.single;

            import com.epam.daggerbinds.annotation.BindTo;
            import com.epam.subtypes.single.Service;

            @BindTo(interfaceType = Service.class)
            public class ServiceImp implements Service {
            }
            """

        const val repositorySourceQualifierName = "com.epam.subtypes.severalfirst.Repository"
        const val repositorySource = """
            package com.epam.subtypes.severalfirst;

            public interface Repository {
            }
            """

        const val repositoryImpFirstSourceQualifierName = "com.epam.subtypes.severalfirst.RepositoryImpFirst"
        const val repositoryImpFirstSource = """
            package com.epam.subtypes.severalfirst;

            import com.epam.daggerbinds.annotation.BindTo;

            import javax.inject.Named;

            @BindTo(interfaceType = Repository.class, qualifier = Named.class)
            public class RepositoryImpFirst implements Repository {
            }
            """

        const val repositoryImpSecondSourceQualifierName = "com.epam.subtypes.severalfirst.RepositoryImpSecond"
        const val repositoryImpSecondSource = """
            package com.epam.subtypes.severalfirst;

            import com.epam.daggerbinds.annotation.BindTo;

            import javax.inject.Named;

            @BindTo(interfaceType = Repository.class, qualifier = Named.class)
            public class RepositoryImpSecond implements Repository {
            }
            """
    }

    private lateinit var processor: DaggerBindsProcessor

    @Before
    fun setUp() {
        processor = DaggerBindsProcessor()
    }

    @Test
    fun `single subtype`() {
        val generatedClass = JavaFileObjects.forSourceString(
            generatedClassQualifierName,
            generatedClassSourceWithSingleType
        )

        val superClass = JavaFileObjects.forSourceString(
            serviceSourceQualifierName,
            serviceSource
        )

        val implementedClass = JavaFileObjects.forSourceString(
            serviceImpSourceQualifierName,
            serviceImpSource
        )

        val compilation = Compiler.javac().withProcessors(processor)
            .compile(implementedClass, superClass)
        CompilationSubject.assertThat(compilation).succeeded()
        CompilationSubject.assertThat(compilation)
            .generatedSourceFile(generatedClassQualifierName)
            .hasSourceEquivalentTo(generatedClass)
    }

    @Test
    fun `multi subtype`() {
        val generatedClass = JavaFileObjects.forSourceString(
            generatedClassQualifierName,
            generatedClassSourceWithMultiTypes
        )

        val superClass = JavaFileObjects.forSourceString(
            repositorySourceQualifierName,
            repositorySource
        )

        val implementedClassFirst = JavaFileObjects.forSourceString(
            repositoryImpFirstSourceQualifierName,
            repositoryImpFirstSource
        )

        val implementedClassSecond = JavaFileObjects.forSourceString(
            repositoryImpSecondSourceQualifierName,
            repositoryImpSecondSource
        )

        val compilation = Compiler.javac().withProcessors(processor)
            .compile(implementedClassFirst, implementedClassSecond, superClass)
        CompilationSubject.assertThat(compilation).succeeded()
        CompilationSubject.assertThat(compilation)
            .generatedSourceFile(generatedClassQualifierName)
            .hasSourceEquivalentTo(generatedClass)
    }
}