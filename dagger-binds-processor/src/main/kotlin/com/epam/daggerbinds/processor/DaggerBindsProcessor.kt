/*
 * Copyright 2019 EPAM Systems, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.epam.daggerbinds.processor

import com.epam.daggerbinds.processor.filer.FileWriter
import com.epam.daggerbinds.processor.generator.BindToModuleGenerator
import com.epam.daggerbinds.processor.store.BindToModuleStore
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.util.Locale
import javax.annotation.processing.AbstractProcessor
import javax.annotation.processing.SupportedAnnotationTypes
import javax.annotation.processing.SupportedOptions
import javax.annotation.processing.SupportedSourceVersion
import javax.annotation.processing.ProcessingEnvironment
import javax.annotation.processing.RoundEnvironment
import javax.lang.model.SourceVersion
import javax.lang.model.element.TypeElement
/**
 * Annotation processor for generating dagger binds module in order to simplify using multi bindings.
 */
@SupportedAnnotationTypes("com.epam.daggerbinds.annotation.BindTo")
@SupportedSourceVersion(SourceVersion.RELEASE_8)
@SupportedOptions("generatedBindToModule")
class DaggerBindsProcessor : AbstractProcessor() {

    /**
     * Storage for found Classes annotated by @BindTo
     */
    private lateinit var store: BindToModuleStore

    /**
     * Initialize [DaggerBindsProcessor] with [BindToModuleStore] instance
     */
    override fun init(processingEnv: ProcessingEnvironment) {
        super.init(processingEnv)
        store = BindToModuleStore(processingEnv)
    }

    /**
     * Processes a elements of annotated classes to generate dagger binds module.
     *
     * @param elements annotation for processing.
     * @param re container for the information about the current round of the generation.
     * @return always return true as subsequent processors doesn't need to process [BindTo] annotation.
     */
    override fun process(elements: Set<TypeElement>, re: RoundEnvironment): Boolean {
        val isFound = store.process(re)
        if (isFound) {
            val genBindToModule = BindToModuleGenerator(processingEnv).generate(store.annotatedElementsData)
            FileWriter(processingEnv).writeToFile(genBindToModule)
            store.clear()
        }
        return true
    }

    companion object {
        /**
         * Name of the processor's parameter which define name of the factory should be generated.
         */
        const val KEY_NAME_BIND_TO_OPTION = "generatedBindToModule"

        /**
         * Date time pattern for the generation comment.
         * @see [generateBaseComment]
         */
        private const val JAVADOC_DATE_PATTERN = "dd-MMMM-yyyy HH:mm"

        /**
         * Generates a javadoc comment which will mark all files created by the processor.
         * @return string comment with tool name and generation date.
         */
        fun generateBaseComment(): String {
            val formatter: DateTimeFormatter = DateTimeFormatter.ofPattern(JAVADOC_DATE_PATTERN)
                .withLocale(Locale.US)

            return """
                Generated by dagger-binds-generator
                ${LocalDateTime.now().format(formatter)}

                """.trimIndent()
        }
    }
}
